function square(number) {
  return number * number;
}

square(2);
4
function myFunc(theObject) {
  theObject.make = "Toyota";
}

const mycar = {
  make: "Honda",
  model: "Accord",
  year: 1998,
};

console.log(mycar.make); // "Honda"
myFunc(mycar);
console.log(mycar.make); // "Toyota"
VM374:11 Honda
VM374:13 Toyota
undefined
VM375 Script snippet #2:17 Honda
VM375 Script snippet #2:19 Honda
VM375 Script snippet #2:27 45
VM375 Script snippet #2:29 30
VM295 Script snippet #2:1 undefined
VM376 Script snippet #2:31 Uncaught SyntaxError: Identifier 'square' has already been declared (at VM376 Script snippet #2:31:7)
VM378 Script snippet #2:17 Honda
VM378 Script snippet #2:19 Honda
VM378 Script snippet #2:27 45
VM378 Script snippet #2:29 30
VM378 Script snippet #2:32 16
VM295 Script snippet #2:1 undefined
VM379 Script snippet #2:42 Uncaught SyntaxError: Identifier 'myFunc' has already been declared (at VM379 Script snippet #2:42:5)
m=hfcr:35     POST https://accounts.google.com/RotateCookies 429
ob @ m=hfcr:35
qb @ m=hfcr:36
(anonymous) @ m=hfcr:34
setTimeout (async)
(anonymous) @ m=hfcr:34
kb @ m=hfcr:34
d @ m=hfcr:33
setTimeout (async)
(anonymous) @ m=hfcr:33
Promise.then (async)
d @ m=hfcr:33
setTimeout (async)
(anonymous) @ m=hfcr:33
Promise.then (async)
d @ m=hfcr:33
(anonymous) @ m=hfcr:33
VM381 Script snippet #2:17 Honda
VM381 Script snippet #2:19 Honda
VM381 Script snippet #2:27 45
VM381 Script snippet #2:29 30
VM381 Script snippet #2:32 16
VM381 Script snippet #2:43 Uncaught ReferenceError: num is not defined
    at VM381 Script snippet #2:43:1
(anonymous) @ VM381 Script snippet #2:43
VM382 Script snippet #2:17 Honda
VM382 Script snippet #2:19 Honda
VM382 Script snippet #2:27 45
VM382 Script snippet #2:29 30
VM382 Script snippet #2:32 16
VM295 Script snippet #2:1 undefined
console.log(factorial(1)); // 1
console.log(factorial(2)); // 2
console.log(factorial(3)); // 6
console.log(factorial(4)); // 24
console.log(factorial(5)); // 120
VM384:1 1
VM384:2 2
VM384:3 6
VM384:4 24
VM384:5 120
undefined
function square(n) {
  return n * n;
}
undefined
const num1 = 20;
const num2 = 3;
const name = "Chamakh";

// This function is defined in the global scope
function multiply() {
  return num1 * num2;
}

console.log(multiply()); // 60

// A nested function example
function getScore() {
  const num1 = 2;
  const num2 = 3;

  function add() {
    return `${name} scored ${num1 + num2}`;
  }

  return add();
}

console.log(getScore()); // "Chamakh scored 5"
VM390:10 60
VM390:24 Chamakh scored 5
undefined
function loop(x) {
  // "x >= 10" is the exit condition (equivalent to "!(x < 10)")
  if (x >= 10) {
    return;
  }
  // do stuff
  loop(x + 1); // the recursive call
}
loop(0);
undefined

function addSquares(a, b) {
  function square(x) {
    return x * x;
  }
  return square(a) + square(b);
}

console.log(addSquares(2, 3)); // 13
console.log(addSquares(3, 4)); // 25
console.log(addSquares(4, 5)); // 41
VM392:9 13
VM392:10 25
VM392:11 41
undefined
function A(x) {
  function B(y) {
    function C(z) {
      console.log(x + y + z);
    }
    C(3);
  }
  B(2);
}
A(1); // Logs 6 (which is 1 + 2 + 3)
VM393:4 6
undefined
const pet = function (name) {
  const getName = function () {
    // The inner function has access to the "name" variable of the outer function
    return name;
  };
  return getName; // Return the inner function, thereby exposing it to outer scopes
};
const myPet = pet("Vivie");

console.log(myPet()); // "Vivie"
VM394:10 Vivie
undefined
function multiply(multiplier, ...theArgs) {
  return theArgs.map((x) => multiplier * x);
}

const arr = multiply(2, 1, 2, 3);
console.log(arr); // [2, 4, 6]
VM395:6 (3) [2, 4, 6]
undefined
const arr = multiply(2, 1, 2, 3);
console.log(arr); // [2, 4, 6]

const a = ["Hydrogen", "Helium", "Lithium", "Beryllium"];

const a2 = a.map(function (s) {
  return s.length;
});

console.log(a2); // [8, 6, 7, 9]

const a3 = a.map((s) => s.length);

console.log(a3); // [8, 6, 7, 9]
VM396:2 (3) [2, 4, 6]
VM396:10 (4) [8, 6, 7, 9]
VM396:14 (4) [8, 6, 7, 9]
undefined